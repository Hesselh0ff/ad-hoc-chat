// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_Message_2eproto__INCLUDED
#define PROTOBUF_Message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MessageProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Message_2eproto();
void protobuf_AssignDesc_Message_2eproto();
void protobuf_ShutdownFile_Message_2eproto();

class Message;

enum Message_Flags {
  Message_Flags_CONNECTED = 0,
  Message_Flags_LEADER = 1,
  Message_Flags_VOTE = 2,
  Message_Flags_CANDIDATE = 3
};
bool Message_Flags_IsValid(int value);
const Message_Flags Message_Flags_Flags_MIN = Message_Flags_CONNECTED;
const Message_Flags Message_Flags_Flags_MAX = Message_Flags_CANDIDATE;
const int Message_Flags_Flags_ARRAYSIZE = Message_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_Flags_descriptor();
inline const ::std::string& Message_Flags_Name(Message_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_Flags_descriptor(), value);
}
inline bool Message_Flags_Parse(
    const ::std::string& name, Message_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_Flags>(
    Message_Flags_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_Flags Flags;
  static const Flags CONNECTED = Message_Flags_CONNECTED;
  static const Flags LEADER = Message_Flags_LEADER;
  static const Flags VOTE = Message_Flags_VOTE;
  static const Flags CANDIDATE = Message_Flags_CANDIDATE;
  static inline bool Flags_IsValid(int value) {
    return Message_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    Message_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    Message_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    Message_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return Message_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return Message_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return Message_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seq = 1;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 1;
  inline ::google::protobuf::int32 seq() const;
  inline void set_seq(::google::protobuf::int32 value);

  // optional int32 msg_id = 2;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  inline ::google::protobuf::int32 msg_id() const;
  inline void set_msg_id(::google::protobuf::int32 value);

  // optional string sender_id = 3;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 3;
  inline const ::std::string& sender_id() const;
  inline void set_sender_id(const ::std::string& value);
  inline void set_sender_id(const char* value);
  inline void set_sender_id(const char* value, size_t size);
  inline ::std::string* mutable_sender_id();
  inline ::std::string* release_sender_id();
  inline void set_allocated_sender_id(::std::string* sender_id);

  // repeated .MessageProto.Message.Flags flags = 4;
  inline int flags_size() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 4;
  inline ::MessageProto::Message_Flags flags(int index) const;
  inline void set_flags(int index, ::MessageProto::Message_Flags value);
  inline void add_flags(::MessageProto::Message_Flags value);
  inline const ::google::protobuf::RepeatedField<int>& flags() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_flags();

  // optional string checksum = 16;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 16;
  inline const ::std::string& checksum() const;
  inline void set_checksum(const ::std::string& value);
  inline void set_checksum(const char* value);
  inline void set_checksum(const char* value, size_t size);
  inline ::std::string* mutable_checksum();
  inline ::std::string* release_checksum();
  inline void set_allocated_checksum(::std::string* checksum);

  // optional string payload = 17;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 17;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const char* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:MessageProto.Message)
 private:
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seq_;
  ::google::protobuf::int32 msg_id_;
  ::std::string* sender_id_;
  ::google::protobuf::RepeatedField<int> flags_;
  ::std::string* checksum_;
  ::std::string* payload_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// optional int32 seq = 1;
inline bool Message::has_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 Message::seq() const {
  // @@protoc_insertion_point(field_get:MessageProto.Message.seq)
  return seq_;
}
inline void Message::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:MessageProto.Message.seq)
}

// optional int32 msg_id = 2;
inline bool Message::has_msg_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_msg_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_msg_id() {
  msg_id_ = 0;
  clear_has_msg_id();
}
inline ::google::protobuf::int32 Message::msg_id() const {
  // @@protoc_insertion_point(field_get:MessageProto.Message.msg_id)
  return msg_id_;
}
inline void Message::set_msg_id(::google::protobuf::int32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:MessageProto.Message.msg_id)
}

// optional string sender_id = 3;
inline bool Message::has_sender_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_sender_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_sender_id() {
  if (sender_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_id_->clear();
  }
  clear_has_sender_id();
}
inline const ::std::string& Message::sender_id() const {
  // @@protoc_insertion_point(field_get:MessageProto.Message.sender_id)
  return *sender_id_;
}
inline void Message::set_sender_id(const ::std::string& value) {
  set_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_id_ = new ::std::string;
  }
  sender_id_->assign(value);
  // @@protoc_insertion_point(field_set:MessageProto.Message.sender_id)
}
inline void Message::set_sender_id(const char* value) {
  set_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_id_ = new ::std::string;
  }
  sender_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageProto.Message.sender_id)
}
inline void Message::set_sender_id(const char* value, size_t size) {
  set_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_id_ = new ::std::string;
  }
  sender_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageProto.Message.sender_id)
}
inline ::std::string* Message::mutable_sender_id() {
  set_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessageProto.Message.sender_id)
  return sender_id_;
}
inline ::std::string* Message::release_sender_id() {
  clear_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_id_;
    sender_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_sender_id(::std::string* sender_id) {
  if (sender_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_id_;
  }
  if (sender_id) {
    set_has_sender_id();
    sender_id_ = sender_id;
  } else {
    clear_has_sender_id();
    sender_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessageProto.Message.sender_id)
}

// repeated .MessageProto.Message.Flags flags = 4;
inline int Message::flags_size() const {
  return flags_.size();
}
inline void Message::clear_flags() {
  flags_.Clear();
}
inline ::MessageProto::Message_Flags Message::flags(int index) const {
  // @@protoc_insertion_point(field_get:MessageProto.Message.flags)
  return static_cast< ::MessageProto::Message_Flags >(flags_.Get(index));
}
inline void Message::set_flags(int index, ::MessageProto::Message_Flags value) {
  assert(::MessageProto::Message_Flags_IsValid(value));
  flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:MessageProto.Message.flags)
}
inline void Message::add_flags(::MessageProto::Message_Flags value) {
  assert(::MessageProto::Message_Flags_IsValid(value));
  flags_.Add(value);
  // @@protoc_insertion_point(field_add:MessageProto.Message.flags)
}
inline const ::google::protobuf::RepeatedField<int>&
Message::flags() const {
  // @@protoc_insertion_point(field_list:MessageProto.Message.flags)
  return flags_;
}
inline ::google::protobuf::RepeatedField<int>*
Message::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:MessageProto.Message.flags)
  return &flags_;
}

// optional string checksum = 16;
inline bool Message::has_checksum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_checksum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_checksum() {
  if (checksum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    checksum_->clear();
  }
  clear_has_checksum();
}
inline const ::std::string& Message::checksum() const {
  // @@protoc_insertion_point(field_get:MessageProto.Message.checksum)
  return *checksum_;
}
inline void Message::set_checksum(const ::std::string& value) {
  set_has_checksum();
  if (checksum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    checksum_ = new ::std::string;
  }
  checksum_->assign(value);
  // @@protoc_insertion_point(field_set:MessageProto.Message.checksum)
}
inline void Message::set_checksum(const char* value) {
  set_has_checksum();
  if (checksum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    checksum_ = new ::std::string;
  }
  checksum_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageProto.Message.checksum)
}
inline void Message::set_checksum(const char* value, size_t size) {
  set_has_checksum();
  if (checksum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    checksum_ = new ::std::string;
  }
  checksum_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageProto.Message.checksum)
}
inline ::std::string* Message::mutable_checksum() {
  set_has_checksum();
  if (checksum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    checksum_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessageProto.Message.checksum)
  return checksum_;
}
inline ::std::string* Message::release_checksum() {
  clear_has_checksum();
  if (checksum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = checksum_;
    checksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_checksum(::std::string* checksum) {
  if (checksum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete checksum_;
  }
  if (checksum) {
    set_has_checksum();
    checksum_ = checksum;
  } else {
    clear_has_checksum();
    checksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessageProto.Message.checksum)
}

// optional string payload = 17;
inline bool Message::has_payload() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_payload() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_payload() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_payload() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& Message::payload() const {
  // @@protoc_insertion_point(field_get:MessageProto.Message.payload)
  return *payload_;
}
inline void Message::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set:MessageProto.Message.payload)
}
inline void Message::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageProto.Message.payload)
}
inline void Message::set_payload(const char* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageProto.Message.payload)
}
inline ::std::string* Message::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessageProto.Message.payload)
  return payload_;
}
inline ::std::string* Message::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessageProto.Message.payload)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MessageProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MessageProto::Message_Flags> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageProto::Message_Flags>() {
  return ::MessageProto::Message_Flags_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Message_2eproto__INCLUDED
